const Utils = require('../utils')

describe('Location Screen Tests', () => {
  before(async () => {
    await device.reloadReactNative()
    await Utils.loginAsUser()
  })
  after(async () => {
    await element(by.type('_UIBackButtonContainerView')).tap()
    await element(by.type('_UIBackButtonContainerView')).tap()
    await Utils.logout()
  })

  beforeEach(async () => {
    await device.reloadReactNative()
    await navigateToLocationScreen()
  })

  const navigateToLocationScreen = async () => {
    await expect(element(by.id('launchScreen'))).toBeVisible()
    await element(by.id('menuButton')).tap()
    await element(by.id('entitiesDrawerButton')).tap()
    await element(by.id('locationEntityScreenButton')).tap()
  }

  it('should allow you to create an entity', async () => {
    await expect(element(by.id('locationScreen'))).toBeVisible()
    await expect(element(by.text('Create'))).toBeVisible()
    // create
    await element(by.text('Create').and(by.type('UIButtonLabel'))).tap()
    await element(by.id('addressLine1Input')).replaceText('sample-data')
    await element(by.id('addressLine2Input')).replaceText('sample-data')
    await element(by.id('cityInput')).replaceText('sample-data')
    await element(by.id('stateInput')).replaceText('sample-data')
    await element(by.id('zipInput')).replaceText('sample-data')
    await element(by.id('countryInput')).replaceText('sample-data')
    await element(by.id('latitudeInput')).replaceText('sample-data')
    await element(by.id('longitueInput')).replaceText('sample-data')
    await waitFor(element(by.id('submitButton'))).toBeVisible().whileElement(by.id('entityScrollView')).scroll(50, 'down')
    await element(by.id('submitButton')).tap()
    await element(by.text('View')).tap()
    await expect(element(by.id('addressLine1'))).toHaveText('AddressLine1: sample-data')
    await expect(element(by.id('addressLine2'))).toHaveText('AddressLine2: sample-data')
    await expect(element(by.id('city'))).toHaveText('City: sample-data')
    await expect(element(by.id('state'))).toHaveText('State: sample-data')
    await expect(element(by.id('zip'))).toHaveText('Zip: sample-data')
    await expect(element(by.id('country'))).toHaveText('Country: sample-data')
    await expect(element(by.id('latitude'))).toHaveText('Latitude: sample-data')
    await expect(element(by.id('longitue'))).toHaveText('Longitue: sample-data')
    // update
    await element(by.text('EDIT')).tap()
    await element(by.id('addressLine1Input')).replaceText('sample-data-2')
    await element(by.id('addressLine2Input')).replaceText('sample-data-2')
    await element(by.id('cityInput')).replaceText('sample-data-2')
    await element(by.id('stateInput')).replaceText('sample-data-2')
    await element(by.id('zipInput')).replaceText('sample-data-2')
    await element(by.id('countryInput')).replaceText('sample-data-2')
    await element(by.id('latitudeInput')).replaceText('sample-data-2')
    await element(by.id('longitueInput')).replaceText('sample-data-2')
    await waitFor(element(by.id('submitButton'))).toBeVisible().whileElement(by.id('entityScrollView')).scroll(50, 'down')
    await element(by.id('submitButton')).tap()
    await element(by.text('OK')).tap()
    await expect(element(by.id('addressLine1'))).toHaveText('AddressLine1: sample-data-2')
    await expect(element(by.id('addressLine2'))).toHaveText('AddressLine2: sample-data-2')
    await expect(element(by.id('city'))).toHaveText('City: sample-data-2')
    await expect(element(by.id('state'))).toHaveText('State: sample-data-2')
    await expect(element(by.id('zip'))).toHaveText('Zip: sample-data-2')
    await expect(element(by.id('country'))).toHaveText('Country: sample-data-2')
    await expect(element(by.id('latitude'))).toHaveText('Latitude: sample-data-2')
    await expect(element(by.id('longitue'))).toHaveText('Longitue: sample-data-2')
    // delete
    await element(by.text('DELETE')).tap()
    await element(by.text('OK')).tap()
    await expect(element(by.id('locationScreen'))).toBeVisible()
  })
})
